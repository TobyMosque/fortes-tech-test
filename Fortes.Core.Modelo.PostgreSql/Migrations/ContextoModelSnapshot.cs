// <auto-generated />
using Fortes.Core.Modelo.Entidades.Enumeradores;
using Fortes.Core.Modelo.Historicos.Enumeradores;
using Fortes.Core.Modelo.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Fortes.Core.Modelo.PostgreSql.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-preview1-24937");

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Dominio.TipoMovimentacao", b =>
                {
                    b.Property<byte>("TipoMovimentacaoID");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TipoMovimentacaoID");

                    b.ToTable("TiposMovimentacao");

                    b.HasAnnotation("Npgsql:Schema", "dominio");

                    b.HasAnnotation("Npgsql:TableName", "TiposMovimentacao");

                    b.HasAnnotation("SqlServer:Schema", "dominio");

                    b.HasAnnotation("SqlServer:TableName", "TiposMovimentacao");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Grupo", b =>
                {
                    b.Property<int>("GrupoID");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("GrupoID");

                    b.HasIndex("Descricao")
                        .IsUnique();

                    b.ToTable("Grupos");

                    b.HasAnnotation("Npgsql:Schema", "entidade");

                    b.HasAnnotation("Npgsql:TableName", "Grupos");

                    b.HasAnnotation("SqlServer:Schema", "entidade");

                    b.HasAnnotation("SqlServer:TableName", "Grupos");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Movimentacao", b =>
                {
                    b.Property<Guid>("MovimentacaoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quantidade");

                    b.Property<Guid>("RecursoID");

                    b.Property<byte>("TipoMovimentacaoID");

                    b.Property<Guid>("UsuarioID");

                    b.HasKey("MovimentacaoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RecursoID");

                    b.HasIndex("TipoMovimentacaoID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("GrupoID", "DataCriacao")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Movimentacoes");

                    b.HasAnnotation("Npgsql:Schema", "entidade");

                    b.HasAnnotation("Npgsql:TableName", "Movimentacoes");

                    b.HasAnnotation("SqlServer:Schema", "entidade");

                    b.HasAnnotation("SqlServer:TableName", "Movimentacoes");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Recurso", b =>
                {
                    b.Property<Guid>("RecursoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Observacao")
                        .HasMaxLength(250);

                    b.Property<int>("Quantidade");

                    b.HasKey("RecursoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("GrupoID", "DataCriacao")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("GrupoID", "Descricao")
                        .IsUnique();

                    b.ToTable("Recursos");

                    b.HasAnnotation("Npgsql:Schema", "entidade");

                    b.HasAnnotation("Npgsql:TableName", "Recursos");

                    b.HasAnnotation("SqlServer:Schema", "entidade");

                    b.HasAnnotation("SqlServer:TableName", "Recursos");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Sessao", b =>
                {
                    b.Property<Guid>("SessaoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("Token")
                        .HasMaxLength(64);

                    b.Property<Guid>("UsuarioID");

                    b.HasKey("SessaoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UsuarioID");

                    b.HasIndex("GrupoID", "DataCriacao")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Sessoes");

                    b.HasAnnotation("Npgsql:Schema", "entidade");

                    b.HasAnnotation("Npgsql:TableName", "Sessoes");

                    b.HasAnnotation("SqlServer:Schema", "entidade");

                    b.HasAnnotation("SqlServer:TableName", "Sessoes");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("UsuarioID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Logon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<byte[]>("Senha")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("UsuarioID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("GrupoID", "DataCriacao")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("GrupoID", "Logon")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasAnnotation("Npgsql:Schema", "entidade");

                    b.HasAnnotation("Npgsql:TableName", "Usuarios");

                    b.HasAnnotation("SqlServer:Schema", "entidade");

                    b.HasAnnotation("SqlServer:TableName", "Usuarios");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Dominio.TipoHistorico", b =>
                {
                    b.Property<byte>("TipoHistoricoID");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TipoHistoricoID");

                    b.ToTable("TiposHistorico");

                    b.HasAnnotation("Npgsql:Schema", "dominio");

                    b.HasAnnotation("Npgsql:TableName", "TiposHistorico");

                    b.HasAnnotation("SqlServer:Schema", "dominio");

                    b.HasAnnotation("SqlServer:TableName", "TiposHistorico");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Movimentacao", b =>
                {
                    b.Property<Guid>("HistoricoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataHistorico");

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MovimentacaoID");

                    b.Property<int>("Quantidade");

                    b.Property<Guid>("RecursoID");

                    b.Property<Guid?>("SessaoID");

                    b.Property<byte>("TipoHistoricoID");

                    b.Property<byte>("TipoMovimentacaoID");

                    b.Property<Guid>("UsuarioID");

                    b.HasKey("HistoricoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MovimentacaoID");

                    b.HasIndex("RecursoID");

                    b.HasIndex("SessaoID");

                    b.HasIndex("TipoHistoricoID");

                    b.HasIndex("TipoMovimentacaoID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("GrupoID", "DataHistorico")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("HistoricoMovimentacoes");

                    b.HasAnnotation("Npgsql:Schema", "historico");

                    b.HasAnnotation("Npgsql:TableName", "Movimentacoes");

                    b.HasAnnotation("SqlServer:Schema", "historico");

                    b.HasAnnotation("SqlServer:TableName", "Movimentacoes");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Recurso", b =>
                {
                    b.Property<Guid>("HistoricoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataHistorico");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Observacao")
                        .HasMaxLength(250);

                    b.Property<int>("Quantidade");

                    b.Property<Guid>("RecursoID");

                    b.Property<Guid?>("SessaoID");

                    b.Property<byte>("TipoHistoricoID");

                    b.HasKey("HistoricoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RecursoID");

                    b.HasIndex("SessaoID");

                    b.HasIndex("TipoHistoricoID");

                    b.HasIndex("GrupoID", "DataHistorico")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("HistoricoRecursos");

                    b.HasAnnotation("Npgsql:Schema", "historico");

                    b.HasAnnotation("Npgsql:TableName", "Recursos");

                    b.HasAnnotation("SqlServer:Schema", "historico");

                    b.HasAnnotation("SqlServer:TableName", "Recursos");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Usuario", b =>
                {
                    b.Property<Guid>("HistoricoID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataHistorico");

                    b.Property<int>("GrupoID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Logon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<byte[]>("Senha")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("SessaoID");

                    b.Property<byte>("TipoHistoricoID");

                    b.Property<Guid>("UsuarioID");

                    b.HasKey("HistoricoID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SessaoID");

                    b.HasIndex("TipoHistoricoID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("GrupoID", "DataHistorico")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("HistoricoUsuarios");

                    b.HasAnnotation("Npgsql:Schema", "historico");

                    b.HasAnnotation("Npgsql:TableName", "Usuarios");

                    b.HasAnnotation("SqlServer:Schema", "historico");

                    b.HasAnnotation("SqlServer:TableName", "Usuarios");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Movimentacao", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("GrupoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Recurso", "Recurso")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("RecursoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Core.Modelo.Entidades.Dominio.TipoMovimentacao", "TipoMovimentacao")
                        .WithMany()
                        .HasForeignKey("TipoMovimentacaoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Core.Modelo.Entidades.Usuario", "Usuario")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Recurso", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany("Recursos")
                        .HasForeignKey("GrupoID");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Sessao", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Usuario", "Usuario")
                        .WithMany("Sessoes")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Entidades.Usuario", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany("Usuarios")
                        .HasForeignKey("GrupoID");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Movimentacao", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Movimentacao", "Entidade")
                        .WithMany("Historicos")
                        .HasForeignKey("MovimentacaoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Core.Modelo.Entidades.Sessao", "Sessao")
                        .WithMany()
                        .HasForeignKey("SessaoID");

                    b.HasOne("Fortes.Core.Modelo.Historicos.Dominio.TipoHistorico", "TipoHistorico")
                        .WithMany()
                        .HasForeignKey("TipoHistoricoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Dominio.TipoMovimentacao", "TipoMovimentacao")
                        .WithMany()
                        .HasForeignKey("TipoMovimentacaoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Core.Modelo.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Recurso", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Recurso", "Entidade")
                        .WithMany("Historicos")
                        .HasForeignKey("RecursoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Sessao", "Sessao")
                        .WithMany()
                        .HasForeignKey("SessaoID");

                    b.HasOne("Fortes.Core.Modelo.Historicos.Dominio.TipoHistorico", "TipoHistorico")
                        .WithMany()
                        .HasForeignKey("TipoHistoricoID");
                });

            modelBuilder.Entity("Fortes.Core.Modelo.Historicos.Usuario", b =>
                {
                    b.HasOne("Fortes.Core.Modelo.Entidades.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Sessao", "Sessao")
                        .WithMany()
                        .HasForeignKey("SessaoID");

                    b.HasOne("Fortes.Core.Modelo.Historicos.Dominio.TipoHistorico", "TipoHistorico")
                        .WithMany()
                        .HasForeignKey("TipoHistoricoID");

                    b.HasOne("Fortes.Core.Modelo.Entidades.Usuario", "Entidade")
                        .WithMany("Historicos")
                        .HasForeignKey("UsuarioID");
                });
        }
    }
}
